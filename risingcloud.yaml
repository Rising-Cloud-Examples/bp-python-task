# The name of the app is what is displayed on the ui for developers. By default
# this matches the url. However, unlike the url, this may be changed as desired.
name: template-python-task

# The app url is a unique value created during app initialization. Once it is
# created, it cannot be changed. This is where you will send requests:
# https://template-python-task.risingcloud.app/risingcloud/jobs
# This is static. Don't edit this value after task creation!
url: template-python-task

# The team ID is the internal ID of the team that owns the app.
# This is static. Don't edit this value after creation!
team: null

# The mode describes how the app is deployed in the Rising Cloud infrastructure.
# "risingcloud" indicates the job is run via a script which reads from a
# "request.json" and writes to a "response.json" in the root of the project.
# This is static. Don't edit this value after creation!
mode: risingcloud

# Workspace is simply an organizational tool. You may change this value and the
# app will be change the workspace it appears under in the ui. You do not have
# to create a new workspace, simply changing the value here will update the UI.
workspace: Sandbox

# The base docker image to use when creating the dockerfile for the app. For
# "risingcloud" mode apps, you can use any linux base image. This requirement
# is due to the Rising Cloud Worker code that Rising Cloud adds to your Task to
# integrate it with the greater risingcloud ecosystem. This is the only
# requirement needed for your image to run on Rising Cloud.
from: python3.11-alpine

# The Rising Cloud builder is set up as a multi-stage docker build. The "build"
# attribute of the yaml describes what happens in the first stage and "deps"
# describes the second. After "build" completes, all the files generated in that
# stage are copied over so the "deps" stage has them. None of the system
# dependencies required to generate those files are passed to the "deps" step.
# Using the "build" attribute is more complex, and is completely optional.
# Each command in both the "build" and "deps" steps are added to the dockerfile
# stage as `RUN {COMMAND}`, so ensure each command is compatible with that form.

# The build process can be complicated. If you would like more details on the
# process or to see some specific examples, please visit our docs page on the
# build process here: 
# TODO: Insert a link above to the new build process

# When a build is completed, you can view the output of the build log to see
# what the multi-stage build looks like. "build" steps are prefaced with
# "[RisingCloud]", and "deps" steps are prefaced with "[deps]".

# List build script here in the format:
# build:
#  - buildCommand1
#  - buildCommand2
#  ...
#  - buildCommandN
# The deps are a series of run commands which are added to the first stage of
# the build process. No system dependencies (Like library/package installs)
# will persist to the "deps" stage. Only generated files will continue.
build: []

# List of deps commands here in the format:
# deps:
#  - depsCommand1
#  - depsCommand2
#  ...
#  - depsCommandN
# The deps are a series of run commands which are added to the second stage of
# the build process. This is normally where you will install package and library
# dependencies for your app.
deps: []

# List of daemon commands here in the format:
# daemons:
#  - daemonCommand1
#  - daemonCommand2
#  ...
#  - daemonCommandN
# A Daemon is just a command that runs in the background as long as your app is
# running (even if it isn't actively processing). Rising Cloud does not monitor
# the health of your daemons, so you will need to build dynamic checks into your
# app if you cannot guarantee your Daemon's health. Common reasons to use a
# daemon generally revolve around reducing the time spent loading large
# libraries or files that are necessary for every job.
daemons: []

# The command which will be run whenever a job is sent to the Rising Cloud
# worker. This command should be responsible for reading from "request.json"
# and writing to "response.json". Note: In order to run a .sh file using this
# attribute, the run command should look like: `bash -c (SCRIPT_NAME)`.
run: python main.py

# The timeout is the amount of time in milliseconds a job can take before
# Rising Cloud considers it to have failed and kills the process automatically.
timeout: 300000

# List of environment variables to include in your app in this format:
# env:
#  key1: value1
#  key2: value2
#  ...
#  keyN: valueN
# These values are automatically loaded into the deployed app as environment
# variables. A common pattern if you have separate deployments of the same code
# in different environments, is to have multiple risingcloud.yaml files in the
# project dir, named risingcloud-{env}.yaml
env: {}

# Min and max workers determines the scaling bounds for your application. Rising
# Cloud will never scale below the minWorkers value, and never scale above the
# maxWorkers value.
minWorkers: 0
maxWorkers: 8

# This is the amount of short-term storage space allocated to each worker in MB.
# Files created during runtime will count against this total, but the worker
# image itself does not. Ensure this value is large enough to run the OS.
maxStorage: 4000
